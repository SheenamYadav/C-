/* Singly linked list */
# include <iostream>
#include <cstdio>
#include <cstdlib>

class Node
{
    private:
    int elem;                         // data in the node
    Node *next;
    friend class linkedList;
};
class linkedList
{
    public:
    linkedList();
    bool isEmpty();
    int front();               // returns front element in the linked list.
    void addFront(int e);
    void addEnd(int e);
    void removeFront();
    int removeEnd();
    void display();
    void addPos(int pos, int e);
    private:
    Node *head;
};

linkedList :: linkedList()
{
    head = NULL;
}
bool linkedList :: isEmpty()
{
    return(head==NULL);
}
int linkedList :: front()
{
    return head->elem;
}
void linkedList::addFront(int e)
{
     Node *v = new Node;
   if(head==NULL)
   {
       v->elem=e;
       v->next=NULL;
       head = v;
       std::cout << "EGTR" << std::endl;
   }
   else
   {
      
       v->elem=e;
       v->next=head;
       head = v;
       std::cout << "fgdg" << std::endl;
   }
}
void linkedList::addEnd(int e)
{
    Node *temp = new Node;
    if(head==NULL)
    {
       temp->elem=e;
       temp->next=NULL;
       head = temp;
    }
    else
    {
        temp = head;
        while(temp->next!=NULL)
        {
            temp=temp->next;
        }
        temp->next->elem=e;
        temp->next->next=NULL;
    }
}
void linkedList::removeFront()
{
    Node *temp = head;
    head=temp->next;
    delete temp;
}
int linkedList::removeEnd()
{
    int info;
    Node *temp =head;
    if(head==NULL)
    {
        std::cout << "Empty Linked List." << std::endl;
    }
    else if(head->next==NULL)
    {
        int info = head->elem; 
        delete head;
        return(info);
    }
    else
    {
        while(temp->next->next!=NULL)
        {
            temp=temp->next;
        }
        info=temp->next->elem;
        return(info);
    }
}
void linkedList::display()
{
    Node *temp;
    if(isEmpty())
    {
        std::cout << "The Linked List is empty." << std::endl;
    }
    else
    {
        temp=head;
        std::cout << "List Elements are: " <<temp->elem;
        while(temp->next!=NULL)
        {
            std::cout << "->" << temp->next->elem;
            temp = temp->next;
        }
        std::cout << " -> NULL" << std::endl;
    }
}
void linkedList::addPos(int pos,int e)
{
    Node *temp;
    Node *ptr;
    Node *h;
    int counter=0;
    h = head;
    temp->elem=e;
    while(h!=NULL);
    {
        h = h->next;
        counter++;
    }
    if(pos==1)
    {
        if(isEmpty())
        {
            head=temp;
            head->next=NULL;
        }
        else
        {
            ptr = head;
            head=temp;
            head->next=ptr;
        }
    }
    else if (pos>1 && pos<counter)
    {
        h = head;
        for(int i =0;i<pos;i++)
        {
            ptr=h;
            h=h->next;
        }
        ptr->next=temp;
        temp->next= h;
    }
    else
    {
        std::cout << "Index out of Range. " << std::endl;
    }
}

int main()
{
    linkedList lst;
    int e;
    int pos;
    char c;
    int ch;
    do
    {
        std::cout << "Enter your choice: " << std::endl;
        std::cout << "1.Insert at front\n2.Insert at End\n3.Delete from front\n4.Delete form end\n5.Get Front element\n6.Display\n7.Exit\n" << std::endl;
        std::cin >> ch;
        switch(ch)
        {
            case 1: std::cout << "Enter element to be inserted: " << std::endl;
                    std::cin >> e;
                    lst.addFront(e);
                    lst.display();
                    break;
            case 2: std::cout << "Enter element to be inserted: " << std::endl;
                    std::cin >> e;
                    lst.addEnd(e);
                    lst.display();
                    break;
            case 3: std::cout << "Element deleted." << std::endl;
                    lst.removeFront();
                    lst.display();
                    break;
            case 4: std::cout << "Element deleted." << std::endl;
                    lst.removeEnd();
                    lst.display();
                    break;
            case 5: e = lst.front();
                    std::cout << "The first element of the linked list is: " <<e<< std::endl;
                    break;
            case 6: lst.display();
                    break;
            case 7: break;
    }
    std::cout << "Do you want to continue (Y/N) : " << std::endl;
    std::cin >> c;
    }while(c=='y'||c=='Y');
    return 0;
}


